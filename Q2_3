# -*- coding: utf-8 -*-
"""
Created on Sun Nov 29 14:27:45 2020

@author: ispan
"""
#Importing key libraries 
import pandas as pd
import numpy as np 
import time
from numpy import random
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import ParameterSampler
import scipy.stats as sp

#setting the seed value
random.seed(101)

#Importing the data frame
df = pd.read_csv("dataset.csv")





# Rndomly selecting 10 columns from the df dataframe
df10 = np.transpose(df.sample(10,axis="columns"))
#Randomly selected 50 columns from the df dataframe 
df50 = np.transpose(df.sample(50, axis="columns"))
#Randomly selected 100 columns from the df dataframe
df100 = np.transpose(df.sample(100, axis="columns"))

####################First attempt
# # Rndomly selecting 10 columns from the df dataframe
# df10 = df.sample(10,axis="columns")
# #Randomly selected 50 columns from the df dataframe 
# df50 = df.sample(50, axis="columns")
# #Randomly selected 100 columns from the df dataframe
# df100 = df.sample(100, axis="columns")
                                       
#Dealing with missing values
#val10 = round((df10.mean(axis=1)).mean())
df10 = df10.fillna(0, inplace=False)

#val50 = round((df50.mean(axis=1)).mean())
df50 = df50.fillna(0, inplace=False)

#val100 = round((df50.mean(axis=1)).mean())
df100  = df100.fillna(0, inplace=False)


        





#Creating a function which calculates the make_span for a given matrix
def make_span(data_frame):#machine_index

    #creating a vector of permutation off all the machines 
    machine_index = random.permutation(np.arange(df.shape[0]))
    #re-ordering the data frame with the permutation indexing of machines
    data_frame = data_frame[machine_index]

    
    
    #calculate the cumulative time for first  job on all machines machine
    data_frame.iloc[0,:] = np.cumsum(data_frame.iloc[0,:])
    
       
    #Calculating the cumulative time for all jobs to be processed on first machine 
    data_frame.iloc[:,0] = np.cumsum(data_frame.iloc[:,0])
   
    #n = Number of jobs
    #m = Number of machines
    n,m = data_frame.shape
   
    #This is runs through the Permutation Flow Shop Problem formula
    for i in range(1, n):
        for j in range(1, m):
            print(data_frame)
            data_frame.iloc[i, j] += np.maximum(data_frame.iloc[i-1, j], data_frame.iloc[i, j-1])
        print(data_frame)
    
    total = time.time() - s
    #This return the last value in the matrix(makespan time)
    make_span_total = data_frame.iloc[-1, -1]
    print("Total time:", total)
    return make_span_total, total


## Example in coursework brief used for testing purpose
P0 = np.transpose(np.array([[3,3,4,2,3],[2,1,3,3,1],[4,2,1,2,3]]))
s0 = np.arange(P0.shape[0])
P0df = pd.DataFrame(P0)


#Testing the makepasn function
s = time.time()
make_span(df50)

##Implementing the Random-Search model
#param_dist = dict(data_frame = df10, machine_index = random.permutation(np.arange(df.shape[0])))
parm_grid = {"data_frame":df10 ,"machine_index":random.permutation(np.arange(df.shape[0]))}


#random_search = RandomizedSearchCV(make_span, param_distributions= param_dist , n_iter= 10, cv=None, n_jobs= 2)
#random_search = ParameterSampler(param_distributions = parm_grid, n_iter = 5, random_state=0)
#for i in random_search:
#    print(i)




#This checks for any missing values
def check_NA(data_frame):
    for i in data_frame:
        print((data_frame[i].isna()).sum())











################### Ask the Group if using OOP in this section will be usefull or not




# #Question 3
        
# #####################################STEP 1
# #Create a list of permutations for order of machines. Exception handling also added to capture input error. 
# def puermutation_of_rows(num_row, data_frame):
#     try:
#         # num_row = int(input("please select a new value <= 60: \n"))
#         permutation_list = random.sample(range(num_row), num_row)
#         print(data_frame.iloc[permutation_list,:])
#     except (IndexError, TypeError, ValueError):
#         print("Your input may be out of range, wrong type or incorrect value. PLease enter a valid input below: \n")
    
    
# #calling the permutation_function
# puermutation_of_rows(60,df10)

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
